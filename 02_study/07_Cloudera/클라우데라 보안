
# https://www.cloudera.com/documentation/enterprise/latest/topics/cm_sg_create_key_trust.html

# Level 0: Basic TLS/SSL Configuration

## Java Keytool Usage for Cloudera Manager TLS/SSL Configuration
```
/usr/java/jdk1.7.0_67-cloudera/jre/lib/security
```

- PATH 설정
```
$ export JAVA_HOME=/usr/java/jdk1.7.0_67-cloudera
$ export PATH=$JAVA_HOME/bin:$PATH
```

### Step 1: Create Directory for Security Artifacts

Cloudera Manager Server host에 아래와 같이 디렉토리 생성
```
$ sudo mkdir -p /opt/cloudera/security/pki
```

### Step 2: Create the Java Truststore
Cloudera Manager Server host에서
```
$ sudo cp $JAVA_HOME/jre/lib/security/cacerts $JAVA_HOME/jre/lib/security/jssecacerts
```

### Step 3: Generate Server Key and CSR
```
$ sudo keytool -genkeypair -alias $(hostname -f)-server -keyalg RSA -keystore \
      /opt/cloudera/security/pki/$(hostname -f)-server.jks -keysize 2048 -dname \
      "CN=$(hostname -f),OU=Dept,O=goodmit.com,L=Mapo-gu,ST=Seoul,C=KO" \
      -storepass P@ssw0rd -keypass P@ssw0rd
      
      
$ sudo keytool -certreq -alias $(hostname -f)-server \
      -keystore /opt/cloudera/security/pki/$(hostname -f)-server.jks \
      -file /opt/cloudera/security/pki/$(hostname -f)-server.csr -storepass P@ssw0rd \
      -keypass P@ssw0rd
```

### Step 4: Submit the CSR to the CA

공인인증기관에서 인증서를 받아서 사용할 수도 있음.



### Step 5: Verify the Certificate

- 공인인증서가 있을때, pem 파일 만들기
openssl x509 -inform der -in /etc/pki/tls/certs/$(hostname -f)-server-rootca.crt -out /tmp/$(hostname -f).pem

- 사설인증서 만들기
https://www.lesstif.com/pages/viewpage.action?pageId=6979614

```
openssl genrsa -aes256 -out /etc/pki/tls/private/$(hostname -f)-rootca.key 2048
chmod 600  /etc/pki/tls/private/$(hostname -f)-rootca.key
vi  /etc/pki/tls/private/rootca_openssl.conf
[ req ]
default_bits            = 2048
default_md              = sha1
default_keyfile         = /etc/pki/tls/private/$(hostname -f)-rootca.key
distinguished_name      = req_distinguished_name
extensions             = v3_ca
req_extensions = v3_ca
  
[ v3_ca ]
basicConstraints       = critical, CA:TRUE, pathlen:0
subjectKeyIdentifier   = hash
##authorityKeyIdentifier = keyid:always, issuer:always
keyUsage               = keyCertSign, cRLSign
nsCertType             = sslCA, emailCA, objCA
[req_distinguished_name ]
countryName                     = Country Name (2 letter code)
countryName_default             = KR
countryName_min                 = 2
countryName_max                 = 2
 
# 회사명 입력
organizationName              = Organization Name (eg, company)
organizationName_default      = Goodmorning Information Technology Co., Ltd
  
# 부서 입력
#organizationalUnitName          = Organizational Unit Name (eg, section)
#organizationalUnitName_default  = BigData
  
# SSL 서비스할 domain 명 입력
commonName                      = Common Name (eg, your name or your server's hostname)
commonName_default             = goodmit.com
commonName_max                  = 64



openssl req -new -key /etc/pki/tls/private/$(hostname -f)-rootca.key -out /opt/cloudera/security/pki/$(hostname -f)-server.csr -config /etc/pki/tls/private/rootca_openssl.conf

openssl x509 -req -days 3650 -extensions v3_ca -set_serial 1 -in /opt/cloudera/security/pki/$(hostname -f)-server.csr  \
     -signkey /etc/pki/tls/private/$(hostname -f)-rootca.key -out /etc/pki/tls/certs/$(hostname -f)-rootca.crt -extfile /etc/pki/tls/private/rootca_openssl.conf

openssl x509 -text -in /etc/pki/tls/certs/$(hostname -f)-rootca.crt

- SSL 인증서 생성
openssl genrsa -aes256 -out /etc/pki/tls/private/$(hostname -f).key 2048
cp  /etc/pki/tls/private/$(hostname -f).key  /etc/pki/tls/private/$(hostname -f).key.enc
chmod 600  /etc/pki/tls/private/$(hostname -f).key*
openssl rsa -in  /etc/pki/tls/private/$(hostname -f).key.enc -out  /etc/pki/tls/private/$(hostname -f).key

vi /etc/pki/tls/private/host_openssl.conf
```
[ req ]
default_bits            = 2048
default_md              = sha1
default_keyfile         = /etc/pki/tls/private/$(hostname -f)-rootca.key
distinguished_name      = req_distinguished_name
extensions             = v3_user
## 인증서 요청시에도 extension 이 들어가면 authorityKeyIdentifier 를 찾지 못해 에러가 나므로 막아둔다.
## req_extensions = v3_user
 
[ v3_user ]
# Extensions to add to a certificate request
basicConstraints = CA:FALSE
authorityKeyIdentifier = keyid,issuer
subjectKeyIdentifier = hash
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
## SSL 용 확장키 필드
extendedKeyUsage = serverAuth,clientAuth
subjectAltName          = @alt_names
[ alt_names]
## Subject AltName의 DNSName field에 SSL Host 의 도메인 이름을 적어준다.
## 멀티 도메인일 경우 *.goodmit.com 처럼 쓸 수 있다.
DNS.1   = www.goodmit.com
DNS.2   = goodmit.com
DNS.3   = *.goodmit.com
 
[req_distinguished_name ]
countryName                     = Country Name (2 letter code)
countryName_default             = KR
countryName_min                 = 2
countryName_max                 = 2
 
# 회사명 입력
organizationName              = Organization Name (eg, company)
organizationName_default      = Goodmorning Information Technology Co., Ltd
  
# 부서 입력
organizationalUnitName          = Organizational Unit Name (eg, section)
organizationalUnitName_default  = BigData Team
  
# SSL 서비스할 domain 명 입력
commonName                      = Common Name (eg, your name or your server's hostname)
commonName_default             = goodmit.com
commonName_max                  = 64
```

openssl req -new  -key /etc/pki/tls/private/$(hostname -f).key -out /etc/pki/tls/certs/$(hostname -f).csr -config /etc/pki/tls/private/host_openssl.conf
openssl x509 -req -days 1825 -extensions v3_user -in /etc/pki/tls/certs/$(hostname -f).csr  \
   -CA /etc/pki/tls/certs/$(hostname -f)-rootca.crt -CAcreateserial \
   -CAkey  /etc/pki/tls/private/$(hostname -f)-rootca.key \
   -out /etc/pki/tls/certs/$(hostname -f).crt  -extfile /etc/pki/tls/private/host_openssl.conf

openssl x509 -text -in   /etc/pki/tls/certs/$(hostname -f).crt   
   
openssl x509 -inform der -in /etc/pki/tls/certs/$(hostname -f).crt -out /opt/cloudera/security/pki/$(hostname -f).cert.pem

cp  /opt/cloudera/security/pki/$(hostname -f).cert.pem    /opt/cloudera/security/pki/intca.cert.pem

keytool -importcert -alias rootca -keystore $JAVA_HOME/jre/lib/security/jssecacerts \
         -file /opt/cloudera/security/pki/rootca.cert.pem -storepass changeit
         
cat /opt/cloudera/security/pki/intca.cert.pem >> /opt/cloudera/security/pki/$(hostname -f)-server.cert.pem
```
    
### Step 6: Import the Certificate into the Keystore
- 공인인증서을   Step 3에서 생성한 Server Key and CSR에 추가하기
cp /tmp/$(hostname -f).pem   /opt/cloudera/security/pki/$(hostname -f)-server.cert.pem

keytool -importcert -alias $(hostname -f)-server \
    -file /opt/cloudera/security/pki/$(hostname -f)-server.cert.pem \
    -keystore /opt/cloudera/security/pki/$(hostname -f)-server.jks


### Step 7: Enable HTTPS for the Cloudera Manager Admin Console


- 1. Cloudera Manager Admin Console에 로그인
- 2. Administration > Settings. 메뉴선택 
- 3. Security 카테고리 선택
- 4. 아래와 같이 Property와 값을 설정
    - Use TLS Encryption for Admin Console  :  enable 체크
    - Cloudera Manager TLS/SSL Server JKS Keystore File Location :  /opt/cloudera/security/pki/$(hostname -f)-server.jks
    - Cloudera Manager TLS/SSL Server JKS Keystore File Password :  P@ssw0rd
- 5. 변경 내용 저장

### Step 8: Specify TLS/SSL Truststore Properties for Cloudera Management Services

- 1. Clusters > Cloudera Management Service. 메뉴 선택
- 2. Configuration 탭 선택
- 3. Scope > Cloudera Management Service (Service-Wide). 메뉴 선택
- 4. Category > Security. 메뉴 선택
- 5. 아래와 같은 TLS/SSL properties 값 설정
     -  TLS/SSL Client Truststore File Location : $JAVA_HOME/jre/lib/security/jssecacerts
     - TLS/SSL Client Truststore File Location : changeit
- 6. 변경 내용 저장

### Step 9: Restart Cloudera Manager and Services

service cloudera-scm-server restart

https://{cm01.example.com}:7183

Cloudera Manager Admin Console에 접속하여
1. Clusters > Cloudera Management Service 메뉴선택
2. Cloudera Management Service Actions 드롭다운메뉴에서 Restart 선택




# Level 1: Enabling Encryption for the Cluster

## Step 1: Enable TLS Encryption for the Cloudera Manager Agents

1. Cloudera Manager Admin Console에 로그인
2. Administration > Settings 을 선택
3. Security 카테고리를 클릭
4. 아래의  TLS settings 을 설정
    - Use TLS Encryption for Agents : Cloudera Manager Server 와 Cloudera Manager Agent host들 간의 통신을 암호화하도록 체크박스를 체크함.
5. 변경 저장

## Step 2: Modify the Cloudera Manager Agent Configuration File

클러스터를 구성하는 모든 Cloudera Manager Agent host system 에 대해서

- vi /etc/cloudera-scm-agent/config.ini
```
[Security]
# Use TLS and certificate validation when connecting to the CM server.
use_tls=1
```


### Step 3: Restart the Cloudera Manager Server

$ sudo service cloudera-scm-server restart 


### Step 4: Restart the Cloudera Manager Agents

$ sudo service cloudera-scm-agent restart


### Step 5: Check Cloudera Manager Server-Agent Communications

1. Cloudera Manager Admin Console 접속
2. Hosts > All Hosts 메뉴 선택
3. Last Heartbeat 필터를 선택하고 상태 확인,  모든 host가 Good 으로 나오는지 확인

### Step 6: Integrate Kerberos (Optional)


#### Step 1: Installing Kerberos

- Installing Kerberos on Redhat 7 : https://gist.github.com/ashrithr/4767927948eca70845db
- Installing Kerberos on Redhat 6 :  https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Managing_Smart_Cards/installing-kerberos.html
- Kerberos Server Replication : http://bloodguy.tistory.com/954

#### Step 2: If You are Using AES-256 Encryption, Install the JCE Policy File

- Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy File을 미리 설치 필요함.
- Cloudera Manager Admin Console -> Hosts  페이지 -> Add New Hosts to Cluster 마법사 -> Re-run Upgrade Wizard  -> install the JCE Policy file 

Encryption  확인방법
- KDC Server 에서  
```
kadmin:  addprinc test
```
- 클러스터내의 하나의 호스트에서
```
$ kinit test 
$ klist -e 
```

#### Step 3: Get or Create a Kerberos Principal for the Cloudera Manager Server

- Active Directory을 사용할때 

- KDC을 사용할때 
    - KDC Server 에서 
```
$ kadmin.local
kadmin.local:  addprinc -pw P@ssw0rd cloudera-scm/admin@GOODMIT.COM
```

#### Step 4: Enabling Kerberos Using the Wizard

#### Step 5: Create the HDFS Superuser

#### Step 6: Get or Create a Kerberos Principal for Each User Account

#### Step 7: Prepare the Cluster for Each User

#### Step 8: Verify that Kerberos Security is Working

#### Step 9: (Optional) Enable Authentication for HTTP Web Consoles for Hadoop Roles











